package il.ac.hit.todolist.controller;

import il.ac.hit.todolist.model.*;
import com.google.gson.Gson;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class TaskController extends Controller {




    public TaskController() { // default constructor
    }

    public TaskController(HttpServletRequest request, HttpServletResponse response) {
        super(request, response);
    }

    private boolean unauthorizedAccess(int expectedListID, int providedListID) {
        boolean unauthorized = false;

        if (expectedListID != providedListID) {
            unauthorized = true;
            request.setAttribute("error", "You can't add a task to a list you don't own.");
        }
        return unauthorized;
    }

    private boolean bodyIsMissingTaskDetails() {
        boolean missing = false;

        if(!request.getParameterMap().containsKey("taskID") || !request.getParameterMap().containsKey("listID")) {
            missing = true;
            request.setAttribute("error", "Task ID or list ID are not provided.");
        }
        //    if (!requestBody.has("taskID") || !requestBody.has("listID")) {
//            missing = true;
//            request.setAttribute("taskID", "Task ID or list ID not provided.");
//        }
        return missing;
    }

    private void startTaskLoading(User loggedInUser) throws ToDoListException {

        int irrelevantTaskID = 00; // because it's auto generated by hibernate
        int listID = Integer.parseInt(request.getParameter("listID")); //ARGUABLE!!!Do we need to get it as String ?

        if (!unauthorizedAccess(loggedInUser.getListID(), listID)) { // the user owns the list
            Task task = new Task(irrelevantTaskID, listID, request.getParameter("description"),
                                 Boolean.parseBoolean(request.getParameter("status")), request.getParameter("deadline"));
            if (TaskHibernateDAO.getInstance().addItem(task)) {
                request.setAttribute("taskID", String.valueOf(task.getTaskID()));
                request.setAttribute("listID", String.valueOf(task.getListID()));
                try {
                    request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
                } catch (IOException | ServletException ex) {
                    throw new ToDoListException(ex.getMessage(), ex);
                }
            }
            else {// [ERROR]
                request.setAttribute("error", "There was a problem adding the task.");
            }
        }
    }

    private void startTaskDeletion(int expectedListID) throws ToDoListException {
        //request body contains taskID and listID and the user owns the list
        if (!bodyIsMissingTaskDetails() && !unauthorizedAccess(expectedListID, Integer.parseInt(request.getParameter("listID")))) {
            if (TaskHibernateDAO.getInstance().deleteItem(Integer.parseInt(request.getParameter("listID")))) {
                request.setAttribute("listID", String.valueOf(request.getParameter("listID")));
                try {
                    request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
                } catch (IOException | ServletException ex) {
                    throw new ToDoListException(ex.getMessage(), ex);
                }
            }
            else { // [ERROR]
                request.setAttribute("error", "Wrong task ID provided.");
            }
        }
    }

    private void startTaskStatusUpdate(User loggedInUser) throws ToDoListException,ServletException,IOException{
        String taskID = request.getParameter("taskID");
        String status = request.getParameter("status");

        if (!bodyIsMissingTaskDetails() && !unauthorizedAccess(loggedInUser.getListID(),Integer.parseInt(taskID))) {
            if (TaskHibernateDAO.getInstance().updateStatus(Integer.parseInt(taskID), loggedInUser.getListID(), Boolean.parseBoolean(status))) {
                request.getServletContext().getRequestDispatcher("/router/task/getTasksList").forward(request, response);
            }
            else { // [ERROR]
                request.setAttribute("error", "Task ID doesn't exist");
            }
        }

    }

    public void addTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsAlreadyLoggedIn(loggedInUser))  // the user is logged in
                startTaskLoading(loggedInUser);
            else  // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to edit your to do list.");
        } catch (ToDoListException error) {
            System.out.println(error.getMessage());
            error.printStackTrace();
            request.setAttribute("error", error.getMessage());
        } finally {
            try { // Must be separate method in Controller class
                if (request.getAttribute("error") != null)
                    request.getServletContext().getRequestDispatcher("/error.jsp").forward(request, response);
            } catch (IOException | ServletException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }
    }

    public void deleteTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsAlreadyLoggedIn(loggedInUser)) { // the user is logged in
                startTaskDeletion(loggedInUser.getListID());
            }
            else  // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to delete your task.");
        } catch (ToDoListException e) {
            //System.out.println(e.getMessage());
            //e.printStackTrace();
            request.setAttribute("error", "Delete task error.");
        } finally {
            try {
                if (request.getAttribute("error") != null)
                    request.getServletContext().getRequestDispatcher("/error.jsp").forward(request, response);
            } catch (IOException | ServletException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
                //DON'T throw exception here
            }
        }
    }

    public void getTasksList() throws ToDoListException {

        // we don't need it because 'request' and 'response' are 'protected' and derived from 'Controller'
//        HttpServletResponse response = this.getResponse();
//        HttpServletRequest request = this.getRequest();

        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsAlreadyLoggedIn(loggedInUser)) { // the user is logged in
                List<DBObject> list = TaskHibernateDAO.getInstance().getList(loggedInUser.getListID());
                request.setAttribute("tasks", list);
                request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
            } else { // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to get your to do list.");
            }
        } catch (ToDoListException | ServletException | IOException e) {
            //System.out.println(e.getMessage());
            //e.printStackTrace();
            request.setAttribute("error", "Get list error.");
        } finally {
            try {
                if (request.getAttribute("error") != null)
                    request.getServletContext().getRequestDispatcher("/error.jsp").forward(request, response);
            } catch (IOException | ServletException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }
    }
    public void updateTaskStatus() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsAlreadyLoggedIn(loggedInUser)) { // the user is logged in
                startTaskStatusUpdate(loggedInUser);
            }
            else { // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to update a task.");
            }
        } catch (ToDoListException | ServletException | IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Update task error.");
        } finally {
            try {
                if (request.getAttribute("error") != null)
                    request.getServletContext().getRequestDispatcher("/error.jsp").forward(request, response);
            } catch (IOException | ServletException ex) {
                //throw new ToDoListException(ex.getMessage(), ex);
                //DON'T throw exception in finally
            }
        }
    }

}









