package il.ac.hit.todolist.controller;

import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;
import il.ac.hit.todolist.model.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

//Unit ,responsible for task addition , deletion and update of requested field
public class TaskController extends Controller {

    public TaskController() { // default constructor
    }

    public TaskController(HttpServletRequest request, HttpServletResponse response) {
        super(request, response);
    }

    private boolean userOwnsTheList(int expectedListID, int providedListID) {
        boolean authorized = true;
        if (expectedListID != providedListID) {
            authorized = false;
            request.setAttribute("error", "You can't access a task which belongs to a list you don't own.");
        }
        return authorized;
    }
    //This method is invoked while  request for task addition is received
    public void addTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) {// the user is logged in
                startTaskInsertion(loggedInUser);
            } else { // [ERROR] unauthorized!
                request.setAttribute("errorMessage", "Please login to add a task.");
                request.getServletContext().getRequestDispatcher("/login.jsp").forward(request, response);
            }
        } catch (ToDoListException | ServletException | IOException e) {
            request.setAttribute("error", e.getMessage());
        } finally {
            redirectToErrorPageIfNecessary();
        }
    }

    private void startTaskInsertion(User loggedInUser) throws ToDoListException {
        int irrelevantTaskID = 00; // task ID is auto generated by hibernate
        String expectedParameters[] = {"description", "deadline"};
        if (requiredParametersProvided(expectedParameters)) {
                Task task = new Task(
                        irrelevantTaskID,
                        loggedInUser.getListID(),
                        request.getParameter("description"),
                        false, // false is default status (not completed yet)
                        request.getParameter("deadline"));
                if (TaskHibernateDAO.getInstance().addItem(task)) {
                    forwardToTasksList();
                } else { // [ERROR]
                    request.setAttribute("errorMessage", "Can not add task.");
                    forwardToTasksList();
                }
        }
    }

    //This method is invoked while request for task deletion is received
    public void deleteTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) { // the user is logged in
                startTaskDeletion(loggedInUser.getListID());
            } else { // [ERROR] unauthorized!
                request.setAttribute("errorMessage", "Please login to delete your task.");
                request.getServletContext().getRequestDispatcher("/login.jsp").forward(request, response);
            }
        } catch (ToDoListException | ServletException | IOException e) {
            request.setAttribute("error", "Delete task error.");
        } finally {
            redirectToErrorPageIfNecessary();
        }
    }

    private void startTaskDeletion(int expectedListID) throws ToDoListException {
        String expectedParameters[] = {"taskID", "listID"};
        if (requiredParametersProvided(expectedParameters) && userOwnsTheList(expectedListID, Integer.parseInt(request.getParameter("listID")))) {
                if (TaskHibernateDAO.getInstance().deleteItem(Integer.parseInt(request.getParameter("taskID")))) {
                    forwardToTasksList();
                } else { // [ERROR]
                    request.setAttribute("errorMessage", "Wrong task ID provided.");
                    forwardToTasksList();
                }
        }
    }

    public void getTasksList() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) {
                List<DBObject> list = TaskHibernateDAO.getInstance().getList(loggedInUser.getListID());
                request.getSession().setAttribute("tasks", list);
                request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
            } else { // [ERROR] unauthorized!
                request.setAttribute("errorMessage", "Please login to access your to do list.");
                request.getServletContext().getRequestDispatcher("/login.jsp").forward(request, response);
            }
        } catch (ToDoListException | ServletException | IOException e) {
            request.setAttribute("error", "Get list error.");
        } finally {
            redirectToErrorPageIfNecessary();
        }
    }

    //This method is invoked while request for task status update is received
    public void updateTaskStatus() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) { // the user is logged in
                startTaskStatusUpdate(loggedInUser);
            } else { // [ERROR] unauthorized!
                request.setAttribute("errorMessage", "Please login to update your task.");
                request.getServletContext().getRequestDispatcher("/login.jsp").forward(request, response);
            }
        } catch (ToDoListException | ServletException | IOException e) {
            request.setAttribute("error", "Update task error.");
        } finally {
            redirectToErrorPageIfNecessary();
        }
    }

    private void startTaskStatusUpdate(User loggedInUser) throws ToDoListException {
        String expectedParameters[] = {"taskID", "listID", "status"};
        if (requiredParametersProvided(expectedParameters) && userOwnsTheList(loggedInUser.getListID(), Integer.parseInt(request.getParameter("listID")))) {
            int taskIDValue = Integer.parseInt(request.getParameter("taskID"));
            boolean newStatus = Boolean.parseBoolean(request.getParameter("status"));
                if (TaskHibernateDAO.getInstance().updateColumnValue("status", newStatus, "taskID", taskIDValue)) {
                    forwardToTasksList();
                } else { // [ERROR]
                    request.setAttribute("errorMessage", "Task ID doesn't exist.");
                    forwardToTasksList();
                }
        }
    }

}









