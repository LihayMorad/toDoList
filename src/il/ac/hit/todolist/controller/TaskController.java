package il.ac.hit.todolist.controller;

import il.ac.hit.todolist.model.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class TaskController extends Controller {

    public TaskController() { // default constructor
    }

    public TaskController(HttpServletRequest request, HttpServletResponse response) {
        super(request, response);
    }

    private boolean unauthorizedAccess(int expectedListID, int providedListID) {
        boolean unauthorized = false;

        if (expectedListID != providedListID) {
            unauthorized = true;
            request.setAttribute("error", "You can't access a task from a list you don't own.");
        }
        return unauthorized;
    }

    private boolean requestParametersAreMissing(String[] expectedParameters) {
        boolean missing = false;
        Map<String, String[]> parametersMap = request.getParameterMap();
        StringBuilder missingParameters = new StringBuilder();
        for (String expectedParameter : expectedParameters) {
            if (!parametersMap.containsKey(expectedParameter)) {
                missing = true;
                missingParameters.append(expectedParameter).append(", ");
            }
        }
        if (missing) {
            request.setAttribute("error", missingParameters + "not provided.");
        }
//        if (!parametersMap.containsKey("taskID") || !parametersMap.containsKey("listID") || !parametersMap.containsKey("status")) {
//            missing = true;
//            request.setAttribute("error", "Task ID or status ID are not provided.");
//        }
        return missing;
    }

    private void startTaskLoading(User loggedInUser) throws ToDoListException {
        int irrelevantTaskID = 00; // because it's auto generated by hibernate
        String expectedParameters[] = {"description", "deadline"};
        if (!requestParametersAreMissing(expectedParameters)) {
            Task task = new Task(
                    irrelevantTaskID,
                    loggedInUser.getListID(),
                    request.getParameter("description"),
                    false, // false is default status (not completed yet)
                    request.getParameter("deadline"));
            if (TaskHibernateDAO.getInstance().addItem(task)) {
                try {
                    response.sendRedirect(request.getContextPath() + "/router/task/getTasksList");
//                    request.getServletContext().getRequestDispatcher("/router/task/getTasksList").forward(request, response);
                } catch (IOException ex) {
                    throw new ToDoListException(ex.getMessage(), ex);
                }
            } else { // [ERROR]
                request.setAttribute("error", "Can not add task.");
            }
        }
    }

    private void startTaskDeletion(int expectedListID) throws ToDoListException {
        String expectedParameters[] = {"taskID", "listID"};
        if (!requestParametersAreMissing(expectedParameters) && !unauthorizedAccess(expectedListID, Integer.parseInt(request.getParameter("listID")))) {
            if (TaskHibernateDAO.getInstance().deleteItem(Integer.parseInt(request.getParameter("taskID")))) {
                request.setAttribute("listID", String.valueOf(request.getParameter("listID")));
                try {
                    response.sendRedirect(request.getContextPath() + "/router/task/getTasksList");
//                    request.getServletContext().getRequestDispatcher("/router/task/getTasksList").forward(request, response);
                } catch (IOException ex) {
                    throw new ToDoListException(ex.getMessage(), ex);
                }
            } else { // [ERROR]
                request.setAttribute("error", "Wrong task ID provided.");
            }
        }
    }

    private void startTaskStatusUpdate(User loggedInUser) throws ToDoListException {
        String expectedParameters[] = {"taskID", "listID", "status"};
        if (!requestParametersAreMissing(expectedParameters) && !unauthorizedAccess(loggedInUser.getListID(), Integer.parseInt(request.getParameter("listID")))) {
            int taskIDValue = Integer.parseInt(request.getParameter("taskID"));
            boolean newStatus = Boolean.parseBoolean(request.getParameter("status"));

            if (TaskHibernateDAO.getInstance().updateStatus(taskIDValue, loggedInUser.getListID(), newStatus)) {
              //if(TaskHibernateDAO.getInstance().updateColumnValue("status",newStatus,"taskID",taskIDValue)) {
                try {
                    response.sendRedirect(request.getContextPath() + "/router/task/getTasksList");
//                request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
                } catch (IOException ex) {
                    throw new ToDoListException(ex.getMessage(), ex);
                }
            } else { // [ERROR]
                request.setAttribute("error", "Task ID doesn't exist");
            }
        }
    }

    public void addTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) {// the user is logged in
                startTaskLoading(loggedInUser);
            } else { // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to edit your to do list.");
            }
        } catch (ToDoListException error) {
            System.out.println(error.getMessage());
            error.printStackTrace();
            request.setAttribute("error", error.getMessage());
        } finally {
            redirectToErrorPage();
        }
    }

    public void deleteTask() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) { // the user is logged in
                startTaskDeletion(loggedInUser.getListID());
            } else  // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to delete your task.");
        } catch (ToDoListException e) {
            //System.out.println(e.getMessage());
            //e.printStackTrace();
            request.setAttribute("error", "Delete task error.");
        } finally {
            redirectToErrorPage();
        }
    }

    public void getTasksList() throws ToDoListException {

        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) {
                List<DBObject> list = TaskHibernateDAO.getInstance().getList(loggedInUser.getListID());
                request.setAttribute("tasks", list);
                request.getServletContext().getRequestDispatcher("/todolist.jsp").forward(request, response);
            } else { // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to get your to do list.");
            }
        } catch (ToDoListException | ServletException | IOException e) {
            //System.out.println(e.getMessage());
            //e.printStackTrace();
            request.setAttribute("error", "Get list error.");
        } finally {
            redirectToErrorPage();
        }
    }

    public void updateTaskStatus() throws ToDoListException {
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsLoggedIn(loggedInUser)) { // the user is logged in
                startTaskStatusUpdate(loggedInUser);
            } else { // [ERROR] unauthorized!
                request.setAttribute("error", "Please login to update a task.");
            }
        } catch (ToDoListException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Update task error.");
        } finally {
            redirectToErrorPage();
        }
    }

}









