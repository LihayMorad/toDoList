package il.ac.hit.todolist.controller;

import il.ac.hit.todolist.model.*;
import com.google.gson.Gson;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class TaskController extends Controller {

    public TaskController() { // default constructor
    }

    public TaskController(HttpServletRequest request, HttpServletResponse response) {
        super(request, response);
    }

      private  void setTaskAdditionSuccessReport(Task addedTask)  {
        responseBody.put("message", "Task was added successfully");
        responseBody.put("taskID", String.valueOf(addedTask.getTaskID()));
        responseBody.put("listID", String.valueOf(addedTask.getListID()));
        response.setStatus(200);
      }

      private void setTaskDeletionSuccessReport(int listID){
        responseBody.put("message", "Task was deleted successfully");
        responseBody.put("listID", String.valueOf(listID));
        response.setStatus(200);

      }

      private boolean unauthorizedAccess(int expectedListID,int providedListID){
        boolean unauthorized=false;

        if(expectedListID !=providedListID){
            unauthorized=true;
            setErrorReport("You can't add a task to a list you don't own.",401);
        }

        return  unauthorized;
      }

      private boolean bodyIsMissingTaskDetails(){
        boolean missing=false;

        if(!requestBody.has("taskID") || ! requestBody.has("listID") ){
            missing=true;
            setErrorReport("Task ID or list ID not provided.", 405);
        }
        return missing;
      }

      private void startTaskLoading(User loggedInUser) throws ToDoListException{

        int irrelevantTaskID = 00; // because it's auto generated by hibernate
        int listID = requestBody.get("listID").getAsInt(); //ARGUABLE!!!Do we need to get it as String ?


        if (!unauthorizedAccess(loggedInUser.getListID(),listID)) { // the user owns the list
            Task task = new Task(irrelevantTaskID, listID, requestBody.get("description").getAsString(),
                    requestBody.get("status").getAsBoolean(), requestBody.get("deadline").getAsString());
            if (TaskHibernateDAO.getInstance().addItem(task))
                setTaskAdditionSuccessReport(task);

            else  // [ERROR]
                setErrorReport("There was a problem adding the task.",503);
        }
      }

    private void   startTaskDeletion(int expectedListID) throws ToDoListException{
             if(!bodyIsMissingTaskDetails()) { //request body contains taskID and listID
                 if (!unauthorizedAccess(expectedListID,requestBody.get("listID").getAsInt())) { // the user owns the list
                     if (TaskHibernateDAO.getInstance().deleteItem(requestBody.get("taskID").getAsInt())) {
                         setTaskDeletionSuccessReport(requestBody.get("taskID").getAsInt());
                     }
                     else  // [ERROR]
                         setErrorReport("Wrong task ID provided.", 503);
                 }
             }
    }

    public void addtask() throws ToDoListException {

//        $.ajax({
//                type: "POST",
//                url: "http://localhost:8080/toDoList_war_exploded/router/task/addtask",
//                data: JSON.stringify({
//                description: "my first task",
//                listID: 1,
//                status: false,
//                deadline: "1.7.19"
//            }),
//        success: (response) => {
//            console.log("response: ", response);
//        },
//        error: (error) => {
//            console.warn("error: ", error);
//            console.warn("error.responseJSON: ", error.responseJSON);
//        }
//            })


        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (userIsAlreadyLoggedIn(loggedInUser))  // the user is logged in
                startTaskLoading(loggedInUser);

            else  // [ERROR] unauthorized!
                setErrorReport("Please login to edit your to do list.",401);
        } catch (ToDoListException error) {
            System.out.println(error.getMessage());
            error.printStackTrace();
            setErrorReport(error.getMessage(),503);
        } finally {
            try { //Must be separate method in Controller class
                String responseBodyJSON = new Gson().toJson(responseBody);
                response.getWriter().write(responseBodyJSON);
                response.getWriter().flush();
                response.getWriter().close();
            } catch (IOException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }
    }


    public void deletetask() throws ToDoListException {
        // @@@@@@@@@@@@@@@@@@@@ there is a problem when using 'DELETE' method from another origin.
        // @@@@@@@@@@@@@@@@@@@@ there is a problem when using 'DELETE' method from another origin.
        // @@@@@@@@@@@@@@@@@@@@ there is a problem when using 'DELETE' method from another origin.

//        $.ajax({
//                type: "DELETE",
//                url: "http://localhost:8080/toDoList_war_exploded/router/task/deletetask",
//                data: JSON.stringify({ taskID: 9 }),
//        success: (response) => {
//            console.log("response: ", response);
//        },
//        error: (error) => {
//            console.warn("error: ", error);
//            console.warn("error.responseJSON: ", error.responseJSON);
//        }
//            })
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");

            // the user is logged in
            if (userIsAlreadyLoggedIn(loggedInUser)) {
                startTaskDeletion(loggedInUser.getListID());
            }
            else  // [ERROR] unauthorized!
              setErrorReport("Please login to edit your to do list.", 401);
        } catch (ToDoListException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            responseBody.put("error", "Delete task error");
            response.setStatus(503);
        } finally {
            try {
                String responseBodyJSON = new Gson().toJson(responseBody);
                response.getWriter().write(responseBodyJSON);
                response.getWriter().flush();
                response.getWriter().close();
            } catch (IOException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }
    }

    public void getTasksList() throws ToDoListException {

//        $.ajax({
//                type: "GET",
//                url: "http://localhost:8080/toDoList_war_exploded/router/task/getTasksList",
//                success: (response) => {
//            console.log("response: ", response.tasks);
//        },
//        error: (error) => {
//            console.warn("error: ", error);
//            console.warn("error.responseJSON: ", error.responseJSON);
//        }
//            })

        HttpServletResponse response = this.getResponse();
        HttpServletRequest request = this.getRequest();
        Map responseBody = new HashMap<>();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (loggedInUser != null) { // the user is logged in
                int userListID = loggedInUser.getListID();
                List<DBObject> list = TaskHibernateDAO.getInstance().getList(userListID);
                responseBody.put("tasks", list);
                response.setStatus(200);
            } else { // [ERROR] unauthorized!
                responseBody.put("error", "Please login to get your to do list.");
                response.setStatus(401);
            }
        } catch (ToDoListException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            responseBody.put("error", "Get list error");
            response.setStatus(503);
        } finally {
            try {
                String responseBodyJSON = new Gson().toJson(responseBody);
                response.getWriter().write(responseBodyJSON);
                response.getWriter().flush();
                response.getWriter().close();
            } catch (IOException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }
    }

    public void updateTaskStatus() throws ToDoListException {

//        $.ajax({
//                type: "PUT",
//                url: "http://localhost:8080/toDoList_war_exploded/router/task/updateTaskStatus?taskID=2&status=false",
//                success: (response) => {
//            console.log("response: ", response);
//        },
//        error: (error) => {
//            console.warn("error: ", error);
//            console.warn("error.responseJSON: ", error.responseJSON);
//        }
//            })

        HttpServletResponse response = this.getResponse();
        HttpServletRequest request = this.getRequest();
        Map<String, String> responseBody = new HashMap<>();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        try {
            User loggedInUser = (User) request.getSession().getAttribute("loggedInUser");
            if (loggedInUser != null) { // the user is logged in
                String taskID = request.getParameter("taskID");
                String status = request.getParameter("status");
                if (taskID != null && status != null) {
                    int providedTaskID = Integer.parseInt(taskID);
                    int listID = loggedInUser.getListID();
                    boolean providedStatus = Boolean.parseBoolean(status);
                    if (TaskHibernateDAO.getInstance().updateStatus(providedTaskID, listID, providedStatus)) {
                        responseBody.put("message", "Task was updated successfully");
                        response.setStatus(200);
                    } else { // [ERROR]
                        responseBody.put("error", "Task ID isn't exists or you don't own the list which the task belongs to.");
                        response.setStatus(406);
                    }
                } else { // [ERROR]
                    responseBody.put("error", "Task ID or Status not provided!.");
                    response.setStatus(406);
                }

            } else { // [ERROR] unauthorized!
                responseBody.put("error", "Please login to update a task.");
                response.setStatus(401);
            }
        } catch (ToDoListException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            responseBody.put("error", "Update task error");
            response.setStatus(503);
        } finally {
            try {
                String responseBodyJSON = new Gson().toJson(responseBody);
                response.getWriter().write(responseBodyJSON);
                response.getWriter().flush();
                response.getWriter().close();
            } catch (IOException ex) {
                throw new ToDoListException(ex.getMessage(), ex);
            }
        }

    }


}









